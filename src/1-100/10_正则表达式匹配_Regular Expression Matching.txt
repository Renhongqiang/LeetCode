/*
给定一个字符串 (s) 和一个字符模式 (p)。实现支持 '.' 和 '*' 的正则表达式匹配。

'.' 匹配任意单个字符。
'*' 匹配零个或多个前面的元素。
匹配应该覆盖整个字符串 (s) ，而不是部分字符串。

说明:

s 可能为空，且只包含从 a-z 的小写字母。
p 可能为空，且只包含从 a-z 的小写字母，以及字符 . 和 *。
示例 1:

输入:
s = "aa"
p = "a"
输出: false
解释: "a" 无法匹配 "aa" 整个字符串。
示例 2:

输入:
s = "aa"
p = "a*"
输出: true
解释: '*' 代表可匹配零个或多个前面的元素, 即可以匹配 'a' 。因此, 重复 'a' 一次, 字符串可变为 "aa"。
示例 3:

输入:
s = "ab"
p = ".*"
输出: true
解释: ".*" 表示可匹配零个或多个('*')任意字符('.')。
示例 4:

输入:
s = "aab"
p = "c*a*b"
输出: true
解释: 'c' 可以不被重复, 'a' 可以被重复一次。因此可以匹配字符串 "aab"。
示例 5:

输入:
s = "mississippi"
p = "mis*is*p*."
输出: false
*/

class Solution {
    public boolean isMatch(String s, String p) {
        char[] str = s.toCharArray();
        char[] pattern = p.toCharArray();
        if(str == null || pattern == null) {
            return false;
        }
        return Solution.match(str,0,pattern,0);
    }
    
    public static boolean match(char[] s, int sIndex, char[] p, int pIndex) {
        //s结束 p结束
        if(sIndex == s.length && pIndex == p.length) {
            return true;
        }
        //s未结束 p结束
        if(sIndex != s.length && pIndex == p.length) {
            return false;
        }
        //p下一个字符为* 
        if(pIndex+1 < p.length && p[pIndex+1] == '*') {
            //1、p当前字符与s当前字符相同
            if(sIndex < s.length && ( p[pIndex] == s[sIndex] ||
                                      p[pIndex] == '.') ) {
                        //p匹配当前一个字符
                return (match(s, sIndex ,p, pIndex + 2) || 
                        //p匹配当前一个字符
                        match(s, sIndex + 1 ,p, pIndex + 2) ||
                        //*匹配1个，再匹配str中的下一个
                        match(s, sIndex + 1 ,p, pIndex) );
            } 
            //2、p当前字符与s当前字符不相同，p后移两位
            else {
                return match(s, sIndex ,p, pIndex + 2);
            }
        }
         //p下一个字符不是* 且字符串当前字符跟模式当前字符匹配，则都后移1位，否则直接返回false
        if(sIndex < s.length && (p[pIndex] == s[sIndex] || p[pIndex] == '.') ) {
            return match(s,sIndex + 1, p, pIndex+1);
        } 
        return false;
    }
}
